
services:

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - kafka-net

  kafka:
#    image: bitnami/kafka:3.5.1-debian-11-r0
    image: bitnami/kafka:3.9.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ENABLE_KRAFT: "no"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"
    volumes:
#      - kafka_data:/var/lib/kafka/data
       - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
      - kafka-net

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: timescaledb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: air_quality_db
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - kafka-net

  backend:
    build: .
    container_name: backend
    ports:
      - "8081:8081"
    depends_on:
      - kafka
      - timescaledb
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://timescaledb:5432/air_quality_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - kafka-net
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080
      - REACT_APP_MAPBOX_TOKEN=${REACT_APP_MAPBOX_TOKEN}
    networks:
      - kafka-net

volumes:
  kafka_data:
  zookeeper_data:
  timescale_data:
networks:
  kafka-net:
    driver: bridge


